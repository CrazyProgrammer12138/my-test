## flag你将对文件进行何种操作
-- r: 读文件，文件不存在报错
-- r+：读取并写入，文件不存在报错
-- rs：同步读取文件并忽略缓存
-- w：写入文件，不存在则创建，存在则清空
-- wx：排它写入文件
-- wx+: 读取并写入文件，不存在则创建，存在则清空
-- a：追加写入
-- ax：与a类似，排它方式写入
-- a+：取并写入文件，不存在则创建
-- ax+：作用与a+类似，但是以排它方式打开文件
## 帮助记忆
-- r：读取
-- w：写入
-- s：同步
-- +：增加相反操作
-- x：排它方式（读写期间别人不能进行其他操作，锁住文件）
-- r+ w+区别
    当文件不存在时，r+不会创建，而会导致调用失败，但w+会创建
    如果文件存在，r+不会清空，w+会清空


fs.readFile：读文件
fs.writeFile：写文件
fs.appendFile: 追加写入
他们都是把文件当成一个整体来操作的
当文件特别大的，大于内存的是无法执行这样的操作的
fs.open(path, flags, mode, callback) 更加精确的控制读取的字节数
fs.read(fd, buffer, offset, length, position, callback) 精确读一个文件
    fd: file dispciptor 文件描述符
    buffer: 把文件读到哪个buffer里面
    offset：偏移量，写入buffer从哪个索引开始写
    length：读取长度
    position：从文件中读取的位置
    callback(err, bytesRead) bytesRead: 读取字节数
fs.close(): 关闭文件
fs.fsync(fd, callback): 强行的把缓存取得数据写入文件，并且关闭
fs.mkdir(dir, callback): 创建目录
fs.access(dir, fs.constants.R_OK,callback) 判断是否有权限访问这个目录
fs.readdir(path, options, callback) 获取一个目录下面得所有文件或目录
fs.unlink(path, callback) 删除一个非空目录
fs.rmdir(path, callback) 删除一个空目录
fs.stat() 检测文件是够存在
