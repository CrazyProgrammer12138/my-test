## Node能够解决什么问题
-- Node的首要目标是提供一种简单的、用于创建高性能服务器的开发工具
-- Web服务器的瓶颈在于并发的用户量，对比JAVA和PHP的实现方式

## Node是什么
-- Node.js 是一个基于chrome v8引擎的Javascript运行环境让JavaScript的的执行效率与
    低端的C语言的相近的执行效率
-- Node.js使用一个事件驱动、非阻塞I/O的模型，使其轻量又高效
-- Node.js的管理器npm，是全球最大的开源库生态系统

## node的特点
-- 节约内存
-- 节约上下文（context 环境的意思）切换的时间
-- 锁的问题，并发资源的处理。

## 真正多线程如何实现的
-- 并不是真正在统一时间点执行多个任务，而是通过非常快速的切换时间片来实现的

## Node的Event Loop
-- V8引擎解析javascript脚本
-- 解析后的代码，调用NodeAPI
-- libuv库负责Node API的执行，它将不同的任务分配给不同的线程，
   形成一个Event Loop（事件循环），以异步的方式将任务的执行结构返回给V8引擎
-- V8引擎再将结果返回给用户

## 同步与异步 阻塞与非阻塞
-- 同步与异步关注的是消息通知的方式 
-- 阻塞与非阻塞关注的是等待结果时的状态
-- 同步异步取决于被调用者，阻塞非阻塞取决于调用者
-- 同步阻塞
    
-- 异步阻塞
-- 同步非阻塞
-- 异步非阻塞

## nextTick setImmediate 区别和联系
-- nextTick 把回调函数放在当前执行栈的底部
-- setImmediate 把回调函数放在事件队列的尾部, 不会阻塞当前执行栈

-- process 当前进程
-- chdir change direcotry 改变当前工作目录
-- cwd current working directory  当前工作目录

## EventEmitter
-- addListener(event, listener) //对指定事件绑定事件处理函数 
-- on(event, listener) // 对指定事件绑定事件处理函数
-- once(event, listener) // 对指定事件指定只执行一次事件处理函数
-- removeListener(event, listener) // 对指定事件解除事件处理函数
-- removeAllListener(event, listener) // 对指定事件解除所有的事件处理函数
-- setMaxListeners(n) // 指定事件处理函数的最大数量 n为整数，代表最大的可指定事件处理函数的数量
-- listeners(event) // 获取指定事件的所有事件处理函数
-- emit(event, [arg1],[arg2].) // 手工触发指定事件

## node 断点调试
-- V8提供了一个强大的调试器，可以通过TCP协议从外部访问，NodeJS提供一个内建调试器来帮助
开发者调试应用程序，想要开发调试器我们需要再代码中加入debugger标签，当nodejs 执行
到debugger标签时会自动暂停
-- 命令       用途
-- c         继续执行到下一个断电处
-- next,n    单步执行
-- step,s    单步进入函数
-- out,o     退出当前函数
-- setBreakpoint(10)   在第10行设置断点
-- repl      打开求值环境，ctrl_c退回debug模式
-- watch(exp) 把表达式添加监视列表
-- watchers  显示所有表达式的值