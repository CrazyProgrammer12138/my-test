## module
## JS模块方面的不足
-- JS没有模块系统，不支持封闭的作用域和依赖管理
-- 没有标准库，没有文件系统和IO流API
-- 也没有包管理系统

## CommonJS规范
-- 封装功能
-- 封闭作用域
-- 可能解决依赖问题
-- 工作效率更高，重构方便


## dirname 取得当前模块文件的所有的目录
## nodeJs加载模块的步骤（加载过程同步的）
-- 1、找对模块对应的文件
-- 2、读取此文件模块的内容
-- 3、把它封装在一个函数中并且立刻执行
-- 4、执行后把模块的module.exprot 对象赋给school

##  为什么require是同步加载？
-- 因为模块实现了缓存，当第一次加载一个模块之后，会缓存这个模块的exports对象，
以后如果再一次加载此模块，则从缓存中获取，不需要再次加载