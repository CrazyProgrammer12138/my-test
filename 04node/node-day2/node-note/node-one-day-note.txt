## 02 - node 区分环境变量
-- 主线程是单线程（异步）callback，将后续的逻辑写成函数，传入到当前执行的函数中，
    当执行的函数得到了结果后，执行传入的函数（回调函数）
-- 五个人同时吃一碗饭(异步)
-- 阻塞不能异步（阻塞是针对内核说的）
-- i/o操作，读写操作，异步读写（能用异步绝不用同步）
-- event-driven 事件驱动（发布订阅）
-- 在文件中打印this 不是global属性，node自带模块化功能，一个js文件就是一个模块，
   模块中的this不是global

## 同步和异步
-- 同步是指发起调用之后主线程只能挂起，调用者主动等待这个回调的结果
   异步是指发起调用之后主线程可以做别的事情，被调用者通过通知来告知调用者结果

## 什么是阻塞/非阻塞
-- 针对内核来说的，向内核发起请求的时候不会阻塞主线程的执行
   非阻塞是实现异步的前置条件
   
## 什么是IO
-- input（输入）从文件系统中读取文件
    Output（输出）向文件系统写入文件

## 什么是单线程/多线程
-- 单线程指程序按顺序执行，前面的流程执行完毕之后后面的流程才能执行
   多线程指同时可以执行多个任务，比如一边看电视、一边睡觉，通过系统线程上下文切换来弥补
   同步式IO调用时的时间开销
   Node单线程指的是主线程是单线程，所有阻塞的部分交给一个线程池处理，然后这个主线程通过
   一个队列跟线程池协作

## 什么是事件循环
-- 管理异步动作、定时器和回调函数的机制叫事件循环
   异步的时候就会压入到这个队列，然后不停的读取事件，事件发生后会把对应的回调加入队列
   队列按加入的顺序依次执行，由普通函数和回调函数组成；

## Node.js中全局对象
-- Node.js有一个特殊的对象，称全局对象  Global，它及其所有属性都可以在程序的任何地方
   访问，即全局对象
   全局对象
   console(log、info、error、warn、time、timeEnd)\__filename\__dirname\setTimeout\setImmediate
   process * 进程 设置环境变量
    -- 在命令行里配置NODE_ENV , mac export/windows set
    -- 在webstorm中设置环境变量：
    -- 如果代码放在服务器上，那就没有环境变量，取不到可以走上线环境
    -- cwd\chdir\nextTick
   Buffer * 缓存区
   exports，require，module __filename，__dirname
   模块化：好处 低耦合 高内聚 方便维护 防止代码冲突(命名冲突)
  （闭包）
  单例模式（不能保证一定不冲突，导致调用过程长）：当前作用域下有且仅有一个
  CMD(代表着：seajs 就近依赖)  AMD 依赖前置 reqquirejs（浏览器端）


## node基于规范commonjs，靠的是文件的读写实现，node天生自带模块化
-- 1、定义如何创建一个模块  一个js文件就是一个模块
-- 2、如何使用一个模块  require 使用一个文件只需要require文件
-- 3、如果导出一个模块  exports / module.exports

## 直接打印文件中的this指的是空对象，this看的不是在哪定义的，是在哪调用的

## 03node-什么是模块

## 05-npm-安装
-- 第三方模块要通过npm来进行安装 node package manager
-- 全局安装：-g (只能在命令行中使用) 默认安装路径是 npm root -g 查看安装路径
-- nrm NPM registry manager (是专门用来管理和快速切换私人配置的registry)，不会
    加入环境变量中，而是通过 npm 映射
    nrm test: 测试链接时间
    nrm ls: 显示所有源
    nrm use 源的名字：使用源
    npm unistall nrm -g: 卸载nrm
-- nvm(切换node版本)

## 本地安装：
-- 没有-g参数，安装之前需要初始化，记录安装的依赖
    npm init ：不加 -y 
    npm init -y: 
    package.json 目录不能有中文，特殊字符，大写，默认先找当前目录下的package.json
    如果当前目录没有回去上级查找，找不到才认为在当前目录下安装
    package.json script:可以配置快捷方式

## 项目依赖
-- 开发时使用，上线还需要
    npm install jquery
## 开发依赖
-- 开发时使用，线上不使用
    npm install less --save-dev
    npm uninstall less --sav-dev
## 安装全部依赖
-- npm install

## yarn安装 = cnpm
-- npm install -g yarn
    yarn init
    yarn add 依赖
    yarn remove 依赖
    yarn add less --dev
    yarn install

## 想发布包
-- 先回到国外 nrm use npm
-- 包名不能喝已有的包一致
-- 入口文件，做整合用的
-- 注册账号
    npm addUser
-- 发布
    npm publish

## 第三方模块不需要./ 的形式引入  可以直接通过报包将文件引入，
    找package.json中的main文件运行，如果当前目录下没有找到，
    回向上一级查找，找到计算机的根目录为止



# http-server
-- 帮我们启一个本地服务
-- npm install http-server -g
-- http-server -p（改端口）3000 在某个路径下启动服务


## idoc 