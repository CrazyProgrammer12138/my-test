## 01-buffer（16进制）
## 什么是Buffer
-- 缓冲区Buffer是暂时存放输入输出的数据的
-- JS语言没有二进制数据类型，而在处理TCP和文件流的时候，必须要处理二进制数据
-- NodeJS提供了一个BUffer对象来提供对二进制数据的操作
-- 是一个表示固定内存分配的全局对象，也就是说要放到缓存区中的字节数需要提前确定
-- Buffer好比由一个对位字节元素组成的数组，可以有效的在javascript中表示二进制
    数据

## 定义buffer
-- 通过此长度定义buffer
-- 通过数组定义buffer
-- 字符串创建buffer
## buffer常用方法
-- buffer.fill:填充buffer中的内容
-- buffer.toString: 将buffer转化成字符串
-- buffer.copy：拷贝buffer
-- buffer.slice: 截取想要的buffer
-- buffer.concat: buffer的链接方法

## 进制转换
-- base64  进制转化
-- 把一个汉字的24位，转换成4个字节，每个字节就6位，不足补0
-- 1.把16进制转化成2进制 toString()
-- 2.将这些值转化成10进制 去可见编码中取值  parseInt

## promise
-- 1.同步的读取
-- 1.读取文件，文件必须存在, 不能通过 / 读取内容 / 表示根目录
-- 2.读取的默认类型就是buffer
-- 3.async await es7语法 node版本至少是7.9+
    async 后面只能跟随promise
-- 4.回调地狱  链式写法then
-- 5.解决同步异步的结果  Promise.all 如果都成功才成功 一个失败就失败
-- 6.Promise.race() 判断哪个方法比较快
-- 7.Promise类上拥有两个方法可以把结果包装成promise对象rejct/resolve
    （表示一开始就失败或者成功）

## 递归创建目录
-- writeFile
    如果程序 只开始执行一次  可以同步
    readFile会把内容读到buffer中，用这种方式会导致淹没内存
    有读就有写
    读取都是类型都是buffer  写入的时候utf8
    读取的文件必须存在   写的时候 文件不存在会自动创建，里面有内容会覆盖
    默认会调用toString方法
    每次写入都是覆盖，appendFile 追加 少用

-- * stat 
    判断文件的状态
    atime  access time  访问时间
    mtime  modify time  修改时间
    ctime  chage time   变化时间
    birthtime     创建时间
    stats.isFile() 是否是文件 boolean
    stats.isDirectory() 判断是否是文件夹   boolean

-- mkdir
    创建文件夹 
    实例：递归创建目录

-- path
    join: 拼接一个路径

-- events
    remove
    once
    on
    emit

-- 流
    流 可读流 可写流 有方向的  分段读
    流 可以边读边写  不是疯狂的读
    流的方法都是异步的
    rs.on('data'): 触发流事件
    rs.on('end'): 默认data事件是不停的触发 直到文件中的数据全部读出来
    rs.on('err'):  文件不存在或报错
    rs.pause(); 暂停的是on('data') 的触发
    rs.resume(); 恢复data事件的触发
    let rs = fs.createReadStream('3.txt', {highWaterMark: 1})
    
    参数：highWaterMark 每次能读多少 默认64k 默认不需要更改
    读取默认buffer类型
    需要监听事件  事件叫数据到来事件  rs.emit('data', 数据)
    默认叫非流动模式 => 流动模式